{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","ChangeColor","BgChange","name","value","TextForm","useState","text","setText","bootColor","colorState","style","color","backgroundColor","onChange","event","target","rows","disabled","length","newText","toUpperCase","toLowerCase","charAt","slice","CapitalizeWords","i","previousCharacter","split","join","navigator","clipboard","writeText","showAlert","filter","element","Alert","height","alert","word","lower","capitalized","msg","App","setMode","setAlert","setColorState","massage","setTimeout","clr2","document","body","classList","remove","add","clr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.88b098dd.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n  const clickedBlue=()=>{\r\n    props.ChangeColor('Blue');\r\n    props.BgChange();\r\n   \r\n }\r\n  const clickedGreen=()=>{\r\n    props.ChangeColor('green');\r\n    props.BgChange();\r\n   \r\n }\r\n const clickedYellow=()=>{\r\n     props.ChangeColor('yellow');\r\n     props.BgChange();\r\n  }\r\n  const clickedRed=()=>{\r\n     props.ChangeColor('red');\r\n     props.BgChange();\r\n     \r\n  }\r\n  \r\n    return (\r\n      <>\r\n        <div>\r\n             <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">About</a>\r\n        </li>\r\n        \r\n       \r\n      </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n       <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <div className=\"form-check form-check-inline\">\r\n  <input className=\"form-check-input\" onClick={clickedGreen} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\"/>\r\n   <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Green Mode</label>\r\n      </div>\r\n      <div className=\"form-check form-check-inline\">\r\n      <input className=\"form-check-input\"onClick={clickedBlue} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Blue Mode</label>\r\n</div>\r\n <div className=\"form-check form-check-inline\">\r\n      <input className=\"form-check-input\"onClick={clickedRed} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Red Mode</label>\r\n</div>\r\n<div className=\"form-check form-check-inline\">\r\n      <input className=\"form-check-input\"onClick={clickedYellow} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Yellow Mode</label>\r\n</div>\r\n        </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n       \r\n\r\n        </>\r\n        \r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    \r\n  };\r\n","import React ,{useState}from \"react\";\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const handleOnChange =(event)=>{\r\n    // console.log(\"On chaNge\");\r\n    setText(event.target.value);\r\n\r\n  }\r\n  \r\n  const SaveAstxtClick =()=>{\r\n  //   var blob = new Blob([\"test text\"], {type: \"text/plain;charset=utf-8\"});\r\n  // saveAs(blob, \"testfile1.txt\");\r\n  // var MyFile=new File(\r\n  //       [{text}],\"demo.txt\",{type:\"text/plain;charset=utf8\"}\r\n\r\n  // );\r\n  // saveAs(MyFile);\r\n    \r\n     \r\n  }\r\n  const handleUpClick =()=>{\r\n    // console.log(\"Uppercase was clicked\");\r\n    let newText=text.toUpperCase();\r\n     setText(newText);\r\n  }\r\n  const handleLoClick =()=>{\r\n   \r\n    let newText=text.toLowerCase();\r\n     setText(newText);\r\n  }\r\n  const handleClearClick =()=>{\r\n    // var myModalEl = document.getElementById('exampleModal')\r\n   \r\n    let newText=\"\";\r\n     setText(newText);\r\n    \r\n  }\r\n  \r\n  const Capitalize = () => {\r\n        \r\n    let firstchar = text.charAt(0); // storing the first char of the string\r\n    let newText= firstchar.toUpperCase(); // converting that to uppercase\r\n    setText(newText+text.slice(1)); // printing it with rest excluding the first char by using slice\r\n    let CapitalizeWords = text[0].toUpperCase();  \r\n        for (let i = 1; i <= text.length - 1; i++) {  \r\n            let currentCharacter,  previousCharacter = text[i - 1];  \r\n            if (previousCharacter && previousCharacter === ' ') {  \r\n                currentCharacter = text[i].toUpperCase();  \r\n            } else {  \r\n                currentCharacter = text[i];  \r\n            }  \r\n            CapitalizeWords = CapitalizeWords + currentCharacter;  \r\n        }  \r\n        setText(CapitalizeWords);}\r\n        const HandleExtraSpaces=()=>{\r\n\r\n          let newText=text.split(/[ ]+/);\r\n          setText(newText.join(\" \"));\r\n        }\r\n  //   let newText = text.split(\" \").map((currentValue) => {\r\n  //     let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\r\n  //     return newText;\r\n  // });\r\n//   setText(newText.join(\" \"));\r\n\r\n// }\r\n// const handlespaces =()=>{\r\n//   let newtext = text.trim();\r\n//   setText(newtext);\r\n//   };\r\nconst handleCopytoClipboard = () => {\r\n  navigator.clipboard.writeText(text);\r\n  props.showAlert(\"Copied to Clipboard!\",\"success\")\r\n \r\n}\r\n  const [text, setText] = useState('');\r\n  let bootColor=props.colorState;\r\n  // let clr=props.colorState;\r\n  if(bootColor==='green')\r\n    {  \r\n    bootColor='success';\r\n    // clr='#057a0d';\r\n   }\r\n   else if(bootColor==='red')\r\n   { \r\n     bootColor='danger';\r\n    //  clr='#8f0b10';\r\n  }\r\n    else if (bootColor==='yellow')\r\n    {\r\n      bootColor='warning';\r\n    //  clr='#788704';\r\n    }\r\n    else\r\n   { \r\n     bootColor='primary';\r\n    //  clr='#5782c2';\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n    <div style={{color:props.mode==='light'?'black':'white'}}>\r\n      <h1>Type your text below</h1>\r\n     \r\n        <div className=\"mb-3\">\r\n          \r\n          <textarea className=\"form-control\" value={text} style={{backgroundColor:props.mode==='light'?'white':'#192333',color:props.mode==='light'?'black':'white'}} onChange={handleOnChange} id=\"mybox\" rows=\"8\"></textarea>\r\n        </div>\r\n\r\n        <button disabled={text.length===0} className={`btn btn-${bootColor} mx-1 my-1`} onClick={handleUpClick}>To Uppercase</button>\r\n        <button disabled={text.length===0} className={`btn btn-${bootColor} mx-1 my-1`} onClick={handleLoClick}>To Lowercase</button>\r\n        <button disabled={text.length===0} className={`btn btn-${bootColor} mx-1 my-1`} onClick={Capitalize}>Capitalize</button>\r\n        <button disabled={text.length===0} className={`btn btn-${bootColor} mx-1 my-1`} onClick={HandleExtraSpaces}>Remove Extra Spaces</button>\r\n        <button disabled={text.length===0} className={`btn btn-${bootColor} mx-1 my-1`} onClick={handleCopytoClipboard}>Copy</button>\r\n        <button disabled={text.length===0} className={`btn btn-${bootColor} mx-1 my-1`} onClick={handleClearClick}>Clear</button>\r\n        <button disabled={text.length===0} className={`btn btn-${bootColor} mx-1 my-1`} onClick={SaveAstxtClick}>Save as Text</button>\r\n        {/* <button disabled={text.length===0} type=\"button\" className={`btn btn-${bootColor} mx-1 my-1`} data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">Clear</button>\r\n\r\n        \r\n\r\n\r\n\r\n<div className=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog\" >\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\" style={{backgroundColor:props.mode==='light'?'white':clr,color:props.mode==='light'?'black':'white'}}>\r\n        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Clear</h5>\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n      </div>\r\n      <div className=\"modal-body\" style={{backgroundColor:props.mode==='light'?'white':clr,color:props.mode==='light'?'black':'white'}}>\r\n        are you sure?\r\n      </div>\r\n      <div className=\"modal-footer\"style={{backgroundColor:props.mode==='light'?'white':clr}} >\r\n        <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n        <button type=\"button\" className={`btn btn-${bootColor}`} data-bs-dismiss=\"modal\" onClick={handleClearClick}>Yes</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n</div> */}\r\n\r\n\r\n    </div>\r\n    <div>\r\n    <h2 style={{color:props.mode==='light'?'black':'white'}}>Text Summary</h2>\r\n    <p style={{color:props.mode==='light'?'black':'white'}}>{      text.length>0?text.split(/\\s+/).filter((element)=>{return element.length!==0}).length:0} words and {text.length} characters</p>\r\n    </div>\r\n   \r\n      <div className=\"container\" style={{color:props.mode==='light'?'black':'white'}}>\r\n\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalized=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n    {    props.alert &&\r\n    \r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalized(props.alert.type)}</strong> {props.alert.msg}\r\n  \r\n</div> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\nimport React,{useState} from 'react'\n// import About from './components/About';\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n// import colorMode from './components/colorMode';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n\n  const [colorState, setColorState] = useState('blue');\n\n  const showAlert=(massage,type)=>{\n    setAlert({msg:massage,\n                 type:type});\n                 setTimeout(() => {\n                   setAlert(null);\n                 }, 2000);\n}\n const removeBodyClasses=()=>{\n   document.body.classList.remove('bg-light');\n  //  document.body.classList.remove('bg-dark');\n   document.body.classList.remove('bg-#057a0d');\n   document.body.classList.remove('bg-#8f0b10');\n   document.body.classList.remove('bg-#5782c2');\n   document.body.classList.remove('bg-#788704');\n }\n\n \n  let bootColor=colorState;\n  let clr2=colorState;\n  if(bootColor==='green')\n    {  \n    bootColor='success';\n    clr2='#057a0d';\n   }\n   else if(bootColor==='red')\n   { \n     bootColor='danger';\n     clr2='#8f0b10';\n  }\n    else if (bootColor==='yellow')\n    {\n      bootColor='warning';\n     clr2='#788704';\n    }\n    else\n   { \n     bootColor='primary';\n     clr2='#5782c2';\n\n  }\n  const ChangeColor=(clr)=>{\n    setColorState(clr);\n    // if(clr==='green')\n    //     setColorState('green');\n    //     else if(clr==='red')\n    //     setColorState('red');\n    //     else if(clr==='yellow')\n    //     setColorState('yellow');\n    //     else\n\n  }\n  const toggleMode=()=>{\n    removeBodyClasses();\n    document.body.classList.add('bg-'+clr2);\n    if(mode==='light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n  }\n    else\n   { setMode('light');\n    document.body.style.backgroundColor = 'white';\n    showAlert(\"Light mode has been enabled\",\"success\");\n  }\n\n  }\n  \n  const BgChange=()=>{\n    if(mode==='dark')\n    document.body.style.backgroundColor = clr2;\nelse\n    document.body.style.backgroundColor = 'white';\n  }\n  return (\n    <>\n{/*    \n    <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} ChangeColor={ChangeColor} colorState={colorState} BgChange={BgChange}/>\n{/* <colorMode  ChangeColor={ChangeColor} colorState={colorState} /> */}\n<Alert alert={alert}/>\n        {/* <Routes> */}\n          {/* <Route exact path=\"/\" element={  */}\n          <div className=\"container my-3\">  <TextForm showAlert={showAlert} mode={mode} colorState={colorState} /> </div> \n          {/* // }/> */}\n          {/* <Route exact path=\"/about\" element={ */}\n          {/* <div className=\"container my-3\"><About/></div> */}\n          {/* // }/> */}\n          {/* <Route exact path=\"/recovery-password\" element={<RecoveryPassword/>}/> */}\n          {/* <Route path=\"*\" element={<NotFound/>}/> */}\n        {/* </Routes>\n      \n    </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}